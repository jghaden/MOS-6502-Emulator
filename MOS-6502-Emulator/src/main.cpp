/**
  ******************************************************************************
  * @file    main.cpp
  * @author  Josh Haden
  * @version V0.0.1
  * @date    05 NOV 2024
  * @brief
  ******************************************************************************
  * @attention
  *
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "CPU.hpp"
#include "Memory.hpp"

/* Global Variables ----------------------------------------------------------*/
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/



/******************************************************************************/
/******************************************************************************/
/* Public Functions                                                           */
/******************************************************************************/
/******************************************************************************/


/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main()
{
    CPU6502 cpu;

    // Program to add two numbers (42 + 13)
    //BYTE_T program[] = {
    //    0xA9, 0x2A,     // $0800: LDA #$2A    ; Load 42 (0x2A) into accumulator
    //    0x18,           // $0802: CLC         ; Clear carry flag
    //    0x69, 0x0D,     // $0803: ADC #$0D    ; Add 13 (0x0D) to accumulator
    //    0x85, 0x20,     // $0805: STA $20     ; Store result in zero page address $20
    //};

    /*BYTE_T program[] = {
        0xA2, 0x08, 0xCA, 0x8E, 0x00, 0x02, 0xE0, 0x03, 0xD0, 0xF8, 0x8E, 0x01, 0x02,
    };*/

    BYTE_T program[] = {
        0xA9, 0x01, 0x69, 0x01, 0xC9, 0x0A, 0xD0, 0xFA, 0x85, 0x20,
    };

    /*BYTE_T program[] = {
        0xA2, 0x00, 0xA0, 0x00, 0x8A, 0x99, 0x00, 0x02, 
        0x48, 0xE8, 0xC8, 0xC0, 0x10, 0xD0, 0xF5, 0x68, 
        0x99, 0x00, 0x02, 0xC8, 0xC0, 0x20, 0xD0, 0xF7
    };*/
    
    /*BYTE_T program[] = {
        0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0D, 0x06, 0x20, 0x2A, 0x06, 0x60, 0xA9, 0x02, 0x85,
        0x02, 0xA9, 0x04, 0x85, 0x03, 0xA9, 0x11, 0x85, 0x10, 0xA9, 0x10, 0x85, 0x12, 0xA9, 0x0F, 0x85,
        0x14, 0xA9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xA5, 0xFE, 0x85, 0x00, 0xA5, 0xFE,
        0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4D, 0x06, 0x20, 0x8D, 0x06, 0x20, 0xC3,
        0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2D, 0x07, 0x4C, 0x38, 0x06, 0xA5, 0xFF, 0xC9,
        0x77, 0xF0, 0x0D, 0xC9, 0x64, 0xF0, 0x14, 0xC9, 0x73, 0xF0, 0x1B, 0xC9, 0x61, 0xF0, 0x22, 0x60,
        0xA9, 0x04, 0x24, 0x02, 0xD0, 0x26, 0xA9, 0x01, 0x85, 0x02, 0x60, 0xA9, 0x08, 0x24, 0x02, 0xD0,
        0x1B, 0xA9, 0x02, 0x85, 0x02, 0x60, 0xA9, 0x01, 0x24, 0x02, 0xD0, 0x10, 0xA9, 0x04, 0x85, 0x02,
        0x60, 0xA9, 0x02, 0x24, 0x02, 0xD0, 0x05, 0xA9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
        0x20, 0xA8, 0x06, 0x60, 0xA5, 0x00, 0xC5, 0x10, 0xD0, 0x0D, 0xA5, 0x01, 0xC5, 0x11, 0xD0, 0x07,
        0xE6, 0x03, 0xE6, 0x03, 0x20, 0x2A, 0x06, 0x60, 0xA2, 0x02, 0xB5, 0x10, 0xC5, 0x10, 0xD0, 0x06,
        0xB5, 0x11, 0xC5, 0x11, 0xF0, 0x09, 0xE8, 0xE8, 0xE4, 0x03, 0xF0, 0x06, 0x4C, 0xAA, 0x06, 0x4C,
        0x35, 0x07, 0x60, 0xA6, 0x03, 0xCA, 0x8A, 0xB5, 0x10, 0x95, 0x12, 0xCA, 0x10, 0xF9, 0xA5, 0x02,
        0x4A, 0xB0, 0x09, 0x4A, 0xB0, 0x19, 0x4A, 0xB0, 0x1F, 0x4A, 0xB0, 0x2F, 0xA5, 0x10, 0x38, 0xE9,
        0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xC6, 0x11, 0xA9, 0x01, 0xC5, 0x11, 0xF0, 0x28, 0x60, 0xE6,
        0x10, 0xA9, 0x1F, 0x24, 0x10, 0xF0, 0x1F, 0x60, 0xA5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10, 0xB0,
        0x01, 0x60, 0xE6, 0x11, 0xA9, 0x06, 0xC5, 0x11, 0xF0, 0x0C, 0x60, 0xC6, 0x10, 0xA5, 0x10, 0x29,
        0x1F, 0xC9, 0x1F, 0xF0, 0x01, 0x60, 0x4C, 0x35, 0x07, 0xA0, 0x00, 0xA5, 0xFE, 0x91, 0x00, 0x60,
        0xA6, 0x03, 0xA9, 0x00, 0x81, 0x10, 0xA2, 0x00, 0xA9, 0x01, 0x81, 0x10, 0x60, 0xA2, 0x00, 0xEA,
        0xEA, 0xCA, 0xD0, 0xFB, 0x60,
    };*/

    BYTE_T system_vectors[] = {
        0x00, 0x00,     // NMI (Non-Maskable Interrupt) vector
        0x00, 0x08,     // RES (Reset) vector
        0x00, 0x00      // IRQ (Interrupt Request) vector  
    };

    cpu.flashProgram(system_vectors, sizeof(system_vectors), 0xFFFA);

    cpu.flashProgram(program, sizeof(program), 0x0800);  // Load program into memory at $0800

    cpu.reset();    // Set program counter to start of our program

    while (true)
    {
        cpu.viewROM(0x0000, 0x0200);    // Zero page ($0000 ... $00FF) and stack ($0100 ... $01FF)
        cpu.viewROM(0x0800, 0x08FF);    // Program
        cpu.viewROM(0xFFF0, 0xFFFF);    // Jump Vectors ($FFFA ... $FFFF)

        cpu.viewRegisters();
        printf("\r\n");
        cpu.viewFlags();

        printf("\x1B[?25l\x1B[H");

        system("pause > nul");

        cpu.step();
    }

    return 0;
}


/******************************************************************************/
/******************************************************************************/
/* Private Functions                                                          */
/******************************************************************************/
/******************************************************************************/



/************************END OF FILE************************/
